from typing import Any
from typing import Hashable
from typing import Optional

class _Match:
    """
    Stub for the Match class return from fullmatch(), etc.
    """

    def __getitem__(self, group: Hashable) -> str: ...
    def groupdict(self, default: Optional[Any] = ...) -> dict[str, str]: ...

class _Regexp:
    """
    Stub for the Regexp class returned from Compile
    """

    def match(
        self, text: str, pos: Optional[Any] = ..., endpos: Optional[Any] = ...
    ) -> Optional[_Match]: ...
    def fullmatch(
        self, text: str, pos: Optional[Any] = ..., endpos: Optional[Any] = ...
    ) -> Optional[_Match]: ...
    @property
    def pattern(self) -> str: ...

def compile(pattern: str, options: Optional[Any] = ...) -> _Regexp: ...

class Set(object):
    """
    Stub for efficient comparison of str against multiple regex
    """

    def __init__(
        self, anchor: Optional[Any] = ..., options: Optional[Any] = ...
    ) -> None: ...
    @classmethod
    def SearchSet(cls, options: Optional[Any] = ...) -> Any: ...
    @classmethod
    def MatchSet(cls, options: Optional[Any] = ...) -> Any: ...
    @classmethod
    def FullMatchSet(cls, options: Optional[Any] = ...) -> Any: ...
    def Add(self, pattern: str) -> None: ...
    def Compile(self) -> None: ...
    def Match(self, text: str) -> Optional[list[Any]]: ...
