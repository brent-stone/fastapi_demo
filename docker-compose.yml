version: "3.8"

services:
  api:
    # This starts GUnicorn without live-reload
    command: /start.sh
    container_name: demo-backend-api
    # env_file:
    #   - .env
    # The .env import function is nice, but let's explicitly have some redundant setting declaration
    # for both clarity and error traceability by catching and reporting .env file issues as early in
    # the stack execution as possible.
    environment:
      DEBUG: "${DEBUG:?missing .env file with DEBUG}"
      LOG_LEVEL: "${LOG_LEVEL:?missing .env file with LOG_LEVEL}"

      PROJECT_NAME: "${PROJECT_NAME:?missing .env file with PROJECT_NAME}"
      PROJECT_VERSION: "${PROJECT_VERSION:?missing .env file with PROJECT_VERSION}"
      DEFAULT_USERNAME: "${DEFAULT_USERNAME:?missing .env file with DEFAULT_USERNAME}"
      DEFAULT_USER_PASS: "${DEFAULT_USER_PASS:?missing .env file with DEFAULT_USER_PASS}"
      DEFAULT_EMAIL: "${DEFAULT_EMAIL:?missing .env file with DEFAULT_EMAIL}"

      SECRET_KEY: "${SECRET_KEY:?missing .env file with SECRET_KEY}"
      HASH_ALGORITHM: "${HASH_ALGORITHM:?missing .env file with HASH_ALGORITHM}"
      ACCESS_TOKEN_EXPIRE_MINUTES: "${ACCESS_TOKEN_EXPIRE_MINUTES:?missing .env file with ACCESS_TOKEN_EXPIRE_MINUTES}"
      BACKEND_CORS_ORIGINS: "${BACKEND_CORS_ORIGINS:?missing .env file with BACKEND_CORS_ORIGINS}"

      POSTGRES_USER: "${POSTGRES_USER:?missing .env file with POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:?missing .env file with POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB:?missing .env file with POSTGRES_DB}"
      POSTGRES_SERVER: "${POSTGRES_SERVER:?missing .env file with POSTGRES_SERVER}"
      POSTGRES_PORT: "${POSTGRES_PORT:?missing .env file with POSTGRES_PORT}"

      CELERY_BROKER_URL: "${CELERY_BROKER_URL:?missing .env file with CELERY_BROKER_URL}"
      CELERY_RESULT_BACKEND: "${CELERY_RESULT_BACKEND:?missing .env file with CELERY_RESULT_BACKEND}"
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production

    ports:
      - target: 8883
        published: "${API_PORT:?missing .env file with API_PORT}"
        mode: host
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
#      celery:
#        condition: service_healthy
    healthcheck:
      # Note: The INFO logs that may appear in the logs are from FastAPI/Gunicorn, not curl
      test: [ "CMD-SHELL",
              "curl --fail --silent http://localhost:8883/docs || exit 1" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

  db:
    container_name: demo-backend-db
    build:
      context: ./postgres
      dockerfile: Dockerfile
      target: production
    environment:
      POSTGRES_USER: "${POSTGRES_USER:?missing .env file with POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:?missing .env file with POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB:?missing .env file with POSTGRES_DB}"
      # Non-standard environment variables not directly expected by the postgres docker
      # image but called by the scripts mounted from /postgres to create additional
      # users and databases at initialization.
      DB_DATABASE: "${DB_DATABASE:?missing .env file with DB_DATABASE}"
      DB_USER: "${DB_USER:?missing .env file with DB_USER}"
      DB_PASSWORD: "${DB_PASSWORD:?missing .env file with DB_PASSWORD}"
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
      - ./postgres/scripts:/docker-entrypoint-initdb.d/
    ports:
      - target: 5432
        published: "${POSTGRES_PORT:?missing .env file with POSTGRES_PORT}"
        mode: host
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}" ]
      interval: 5s
      timeout: 30s
      retries: 5
    restart: always

  redis:
    container_name: demo-backend-redis
    image: redis:7-alpine
    ports:
      - target: 6379
        published: ${REDIS_PORT:?missing .env file with REDIS_PORT}
        mode: host
    volumes:
      - type: volume
        source: redis-volume
        target: /data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 30s
      retries: 10
    restart: always

volumes:
  postgres-db-volume:
  redis-volume:
